/*
  # Fashion Recommendation System Database Schema

  ## Overview
  This migration creates the database schema for a fashion AI recommendation system that allows users to upload clothing images and receive personalized style recommendations.

  ## New Tables
  
  ### `recommendations`
  Stores all fashion recommendations generated by the AI system
  - `id` (uuid, primary key) - Unique identifier for each recommendation
  - `user_id` (uuid, nullable) - Links to authenticated user (null for anonymous users)
  - `uploaded_item_type` (text) - Type of clothing uploaded (shirt, pants, shoes, etc.)
  - `uploaded_image_url` (text) - URL or base64 of uploaded image
  - `gender` (text) - Gender preference (male, female, unisex)
  - `recommendation_data` (jsonb) - Complete recommendation details including items, colors, styles
  - `selected_categories` (text[]) - User-selected categories for recommendations (null = all categories)
  - `created_at` (timestamptz) - Timestamp of recommendation creation
  
  ### `user_preferences`
  Stores user style preferences and history
  - `id` (uuid, primary key) - Unique identifier
  - `user_id` (uuid) - Links to authenticated user
  - `favorite_styles` (text[]) - Array of favorite style types
  - `color_preferences` (text[]) - Preferred color palettes
  - `updated_at` (timestamptz) - Last update timestamp
  
  ## Security
  - Enable RLS on all tables
  - Users can view their own recommendations
  - Anonymous users can create recommendations but not view history
  - Users can manage their own preferences
  
  ## Notes
  - The system supports both authenticated and anonymous usage
  - Recommendations can be filtered by specific clothing categories
  - All fashion data is stored in flexible JSONB format for extensibility
*/

-- Create recommendations table
CREATE TABLE IF NOT EXISTS recommendations (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE,
  uploaded_item_type text NOT NULL,
  uploaded_image_url text NOT NULL,
  gender text NOT NULL CHECK (gender IN ('male', 'female', 'unisex')),
  recommendation_data jsonb NOT NULL DEFAULT '{}'::jsonb,
  selected_categories text[],
  created_at timestamptz DEFAULT now()
);

-- Create user preferences table
CREATE TABLE IF NOT EXISTS user_preferences (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE UNIQUE NOT NULL,
  favorite_styles text[] DEFAULT ARRAY[]::text[],
  color_preferences text[] DEFAULT ARRAY[]::text[],
  updated_at timestamptz DEFAULT now()
);

-- Enable RLS
ALTER TABLE recommendations ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_preferences ENABLE ROW LEVEL SECURITY;

-- RLS Policies for recommendations table
CREATE POLICY "Users can view own recommendations"
  ON recommendations FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

CREATE POLICY "Anyone can create recommendations"
  ON recommendations FOR INSERT
  TO anon, authenticated
  WITH CHECK (true);

-- RLS Policies for user_preferences table
CREATE POLICY "Users can view own preferences"
  ON user_preferences FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own preferences"
  ON user_preferences FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own preferences"
  ON user_preferences FOR UPDATE
  TO authenticated
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_recommendations_user_id ON recommendations(user_id);
CREATE INDEX IF NOT EXISTS idx_recommendations_created_at ON recommendations(created_at DESC);
CREATE INDEX IF NOT EXISTS idx_user_preferences_user_id ON user_preferences(user_id);
